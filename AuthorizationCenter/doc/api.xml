<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AuthorizationCenter</name>
    </assembly>
    <members>
        <member name="T:AuthorizationCenter.Controllers.CheckController">
            <summary>
            用于检查服务连通性
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Controllers.CheckController.Check">
            <summary>
            检查
            </summary>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Controllers.HomeController">
            <summary>
            主页控制器
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Controllers.HomeController.Name">
            <summary>
            Controller Name
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Controllers.HomeController.Index">
            <summary>
            主页 -MVC
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.HomeController.About">
            <summary>
            关于 -MVC
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.HomeController.Contact">
            <summary>
            联系 -MVC
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.HomeController.Privacy">
            <summary>
            隐私
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.HomeController.Error">
            <summary>
            错误
            </summary>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Controllers.OrganizationJsonsController">
            <summary>
            
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Controllers.OrganizationJsonsController._context">
            <summary>
            
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Controllers.OrganizationJsonsController.Mapper">
            <summary>
            类型映射
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Controllers.OrganizationJsonsController.#ctor(AuthorizationCenter.Entitys.ApplicationDbContext,AutoMapper.IMapper)">
            <summary>
            构造器
            </summary>
            <param name="context"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:AuthorizationCenter.Controllers.OrganizationJsonsController.Index">
            <summary>
            列表 MVC
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.OrganizationJsonsController.Details(System.String)">
            <summary>
            详情 MVC
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.OrganizationJsonsController.Create">
            <summary>
            创建 MVC
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.OrganizationJsonsController.Create(AuthorizationCenter.Dto.Jsons.OrganizationJson)">
            <summary>
            创建 MVC
            </summary>
            <param name="organizationJson"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.OrganizationJsonsController.Edit(System.String)">
            <summary>
            编辑
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.OrganizationJsonsController.Edit(System.String,AuthorizationCenter.Dto.Jsons.OrganizationJson)">
            <summary>
            编辑
            </summary>
            <param name="id"></param>
            <param name="organizationJson"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.OrganizationJsonsController.Delete(System.String)">
            <summary>
            删除 MVC
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.OrganizationJsonsController.DeleteConfirmed(System.String)">
            <summary>
            删除
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Controllers.RoleController">
            <summary>
            角色控制
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Controllers.SignController">
            <summary>
            登陆控制器
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Controllers.SignController.Logger">
            <summary>
            日志器
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Controllers.SignController.UserManager">
            <summary>
            用户管理
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Controllers.SignController.Session">
            <summary>
            Session
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Controllers.SignController.#ctor(AuthorizationCenter.Managers.IUserManager{AuthorizationCenter.Dto.Jsons.UserBaseJson})">
            <summary>
            构造器
            </summary>
            <param name="userManager"></param>
        </member>
        <member name="M:AuthorizationCenter.Controllers.SignController.Index(System.String)">
            <summary>
            登陆主页
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.SignController.SignUp(AuthorizationCenter.Dto.Requests.ModelRequest{AuthorizationCenter.Dto.Jsons.UserBaseJson})">
            <summary>
            注册
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.SignController.SignIn(AuthorizationCenter.ViewModels.Sign.SignInViewModel,System.String)">
            <summary>
            签入
            </summary>
            <param name="request">请求</param>
            <param name="returnUrl">返回URL（跳转）</param>
            <returns></returns>
        </member>
        <member name="P:AuthorizationCenter.Controllers.SignController.SignUser">
            <summary>
            登陆用户
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Controllers.SignController.SignOut(AuthorizationCenter.Dto.Requests.ModelRequest{AuthorizationCenter.Dto.Jsons.UserBaseJson})">
            <summary>
            签出 Clear Session SignUser
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.SignController.RedirectUrlToAction(System.String,System.Object)">
            <summary>
            将ActionURL解析出ActionName与ControllerName
            再重定向到Action并传递参数
            </summary>
            <param name="actionURL"></param>
            <param name="routeValues"></param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Controllers.UserBasesController">
            <summary>
            控制器
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Controllers.UserBasesController._context">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Controllers.UserBasesController.#ctor(AuthorizationCenter.Entitys.ApplicationDbContext)">
            <summary>
            构造器
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:AuthorizationCenter.Controllers.UserBasesController.Index">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.UserBasesController.Details(System.String)">
            <summary>
            详情
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.UserBasesController.Create">
            <summary>
            新建
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.UserBasesController.Create(AuthorizationCenter.Entitys.UserBase)">
            <summary>
            新建
            </summary>
            <param name="userBase"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.UserBasesController.Edit(System.String)">
            <summary>
            编辑
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.UserBasesController.Edit(System.String,AuthorizationCenter.Entitys.UserBase)">
            <summary>
            编辑
            </summary>
            <param name="id"></param>
            <param name="userBase"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.UserBasesController.Delete(System.String)">
            <summary>
            删除
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.UserBasesController.DeleteConfirmed(System.String)">
            <summary>
            删除确认
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Controllers.UserController">
            <summary>
            用户控制
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Controllers.UserController.UserManager">
            <summary>
            用户管理
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Controllers.UserController.Mapper">
            <summary>
            类型映射
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Controllers.UserController.Logger">
            <summary>
            日志器
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Controllers.UserController.#ctor(AuthorizationCenter.Managers.IUserManager{AuthorizationCenter.Dto.Jsons.UserBaseJson},AutoMapper.IMapper)">
            <summary>
            构造器
            </summary>
            <param name="userManager">用户管理</param>
            <param name="mapper">类型映射</param>
        </member>
        <member name="M:AuthorizationCenter.Controllers.UserController.Index">
            <summary>
            列表 -跳转到列表界面
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.UserController.Details(System.String)">
            <summary>
            详情 -跳转到详情界面
            </summary>
            <param name="id">用户ID</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.UserController.Create">
            <summary>
            MVC 创建 -跳转到新建界面
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.UserController.Create(AuthorizationCenter.Dto.Jsons.UserBaseJson)">
            <summary>
            MVC 创建 -在数据库中添加数据
            </summary>
            <param name="userBaseJson">被创建用户</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.UserController.Edit(System.String)">
            <summary>
            MVC 编辑 -跳转到编辑界面
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.UserController.Edit(System.String,AuthorizationCenter.Dto.Jsons.UserBaseJson)">
            <summary>
            MVC 编辑 -修改数据库记录
            </summary>
            <param name="id">用户ID</param>
            <param name="userBaseJson">用户</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.UserController.Delete(System.String,System.String)">
            <summary>
            MVC 删除 -跳转到删除界面 
            </summary>
            <param name="id"></param>
            <param name="errMsg">错误信息</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.UserController.DeleteConfirmed(System.String)">
            <summary>
            MVC 删除确认 -从数据库删除 -跳转到列表界面 
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:AuthorizationCenter.Controllers.UserController.SignUser">
            <summary>
            获取登陆用户简要信息 -每次都是新建一个UserBaseJson对象
            </summary>
            <returns></returns>
            <summary>
            登陆用户
            </summary>
        </member>
        <member name="T:AuthorizationCenter.DbIntializer">
            <summary>
            
            </summary>
        </member>
        <member name="M:AuthorizationCenter.DbIntializer.Initialize(AuthorizationCenter.Entitys.ApplicationDbContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:AuthorizationCenter.Define.Constants">
            <summary>
            常量
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.HEX_REG">
            <summary>
            字符 -十六进制
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.GUID_REG">
            <summary>
            GUID -正则表达式 -单行匹配
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.GUID_ERR">
            <summary>
            GUID 格式错误消息
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.SIGNNAME_REG">
            <summary>
            签名 正则表达式
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.SIGNNAME_ERR">
            <summary>
            签名 格式错误消息
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.PASSWORD_REG">
            <summary>
            密码 正则表达式
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.PASSWORD_ERR">
            <summary>
            密码 格式错误消息
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.VISIBLE_REG">
            <summary>
            可见字符 正则表达式
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.VISIBLE_ERR">
            <summary>
            可见字符 格式错误，不能包含空格以及制表符等不可见字符"
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.CAPSCASE_REG">
            <summary>
            大写字母 正则表达式
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.LOWERCASE_REG">
            <summary>
            小写字母 正则表达式
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.LETTER_REG">
            <summary>
            英文字母 正则表达式
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.SIGNUSER">
            <summary>
            SignUser
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.USERID">
            <summary>
            UserId
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.SIGNNAME">
            <summary>
            SignName
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.PASSWORD">
            <summary>
            PassWord
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Define.Constants.Str">
            <summary>
            一些字符串常量 作废
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.Str.SIGNUSER">
            <summary>
            SignUser
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.Str.USERID">
            <summary>
            UserId
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.Str.SIGNNAME">
            <summary>
            SignName
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.Str.PASSWORD">
            <summary>
            PassWord
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Dto.Jsons.OrganizationJson">
            <summary>
            组织Dto
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Dto.Jsons.OrganizationJson.Id">
            <summary>
            组织ID（GUID）
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Dto.Jsons.OrganizationJson.ParentId">
            <summary>
            父组织ID
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Dto.Jsons.OrganizationJson.Name">
            <summary>
            组织名称
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Dto.Jsons.OrganizationJson.Description">
            <summary>
            组织描述
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Dto.Jsons.PermissionJson">
            <summary>
            权限Dto
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Dto.Jsons.RoleJson">
            <summary>
            角色Dto
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Dto.Jsons.RoleJson.Id">
            <summary>
            角色GUID
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Dto.Jsons.RoleJson.Name">
            <summary>
            角色名称
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Dto.Jsons.RoleJson.Decription">
            <summary>
            角色描述
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Dto.Jsons.UserBaseJson">
            <summary>
            用户基础信息 -- UserBase
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Dto.Jsons.UserBaseJson.Id">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Dto.Jsons.UserBaseJson.SignName">
            <summary>
            用户签名
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Dto.Jsons.UserBaseJson.PassWord">
            <summary>
            用户密码
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Dto.Requests.ModelRequest`1">
            <summary>
            元数据操作请求
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:AuthorizationCenter.Dto.Requests.ModelRequest`1.Data">
            <summary>
            模型 为单实体操作
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Dto.Requests.ModelRequest`1.Type">
            <summary>
            操作 -- 增删查改
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Dto.Requests.ModelListRequest`1">
            <summary>
            元数据批量操作请求
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="T:AuthorizationCenter.Dto.Requests.UserBaseRequest">
            <summary>
            用户请求
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Dto.Requests.UserBaseRequest.User">
            <summary>
            用户基础信息
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Entitys.ApplicationDbContext">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Entitys.ApplicationDbContext.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Entitys.ApplicationDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{AuthorizationCenter.Entitys.ApplicationDbContext})">
            <summary>
            应用数据库上下文
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:AuthorizationCenter.Entitys.ApplicationDbContext.UserBases">
            <summary>
            用户数据集
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Entitys.ApplicationDbContext.Roles">
            <summary>
            角色数据集
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Entitys.ApplicationDbContext.UserRoles">
            <summary>
            用户角色
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Entitys.ApplicationDbContext.Permissions">
            <summary>
            权限数据集
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Entitys.ApplicationDbContext.Organizations">
            <summary>
            组织数据集
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Entitys.ApplicationDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            在模型创建时
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:AuthorizationCenter.Entitys.ApplicationDbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            数据库配置
            </summary>
            <param name="builder">数据库上下文选项创建器</param>
        </member>
        <member name="T:AuthorizationCenter.Entitys.Organization">
            <summary>
            组织模型
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Entitys.Organization.Id">
            <summary>
            组织ID（GUID）
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Entitys.Organization.ParentId">
            <summary>
            父组织ID
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Entitys.Organization.Name">
            <summary>
            组织名称
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Entitys.Organization.Description">
            <summary>
            组织描述
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Entitys.Permission">
            <summary>
            权限模型
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Entitys.Permission.Id">
            <summary>
            权限ID
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Entitys.Permission.Name">
            <summary>
            权限名称
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Entitys.Permission.Description">
            <summary>
            权限描述
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Entitys.Role">
            <summary>
            角色实体
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Entitys.Role.Id">
            <summary>
            角色GUID
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Entitys.Role.Name">
            <summary>
            角色名称
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Entitys.Role.Decription">
            <summary>
            角色描述
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Entitys.Role.UserRoles">
            <summary>
            用户角色
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Entitys.UserBase">
            <summary>
            用户实体
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Entitys.UserBase.Id">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Entitys.UserBase.SignName">
            <summary>
            用户签名
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Entitys.UserBase.PassWord">
            <summary>
            用户密码
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Entitys.UserBase.UserRoles">
            <summary>
            用户角色
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Entitys.UserRole">
            <summary>
            用户与角色关联
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Entitys.UserRole.Id">
            <summary>
            关联ID
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Entitys.UserRole.UserId">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Entitys.UserRole.RoleId">
            <summary>
            角色ID
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Entitys.UserRole.User">
            <summary>
            用户
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Entitys.UserRole.Role">
            <summary>
            角色
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Filters.CheckPermission">
            <summary>
            权限检查过滤器（异步权限检查）
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Filters.CheckPermission.UserManager">
            <summary>
            用户管理
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Filters.CheckPermission.PermissionManager">
            <summary>
            权限管理
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Filters.CheckPermission.RoleManager">
            <summary>
            角色管理
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Filters.CheckPermission.OrganizationManager">
            <summary>
            组织管理
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Filters.CheckPermission.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            异步过滤
            </summary>
            <param name="context">行为执行上下文</param>
            <param name="next">下一个行为执行</param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Filters.SignFilter">
            <summary>
            登陆过滤器
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Filters.SignFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            当动作执行中 
            </summary>
            <param name="context">动作执行上下文</param>
        </member>
        <member name="T:AuthorizationCenter.Filters.NoSignAttribute">
            <summary>
            不需要权限登陆的地方加个特性
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Injections.MappingProfile">
            <summary>
            映射
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Injections.MappingProfile.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Managers.IOrganizationManager`2">
            <summary>
            组织管理
            </summary>
            <typeparam name="IStore">存储</typeparam>
            <typeparam name="TJson">Dto数据分离，映射模型</typeparam>
        </member>
        <member name="M:AuthorizationCenter.Managers.IOrganizationManager`2.Create(WS.Core.Dto.ResponseMessage{`1},AuthorizationCenter.Dto.Requests.ModelRequest{`1})">
            <summary>
            新建
            </summary>
            <param name="response">响应</param>
            <param name="request">请求</param>
        </member>
        <member name="M:AuthorizationCenter.Managers.IOrganizationManager`2.Update(WS.Core.Dto.ResponseMessage{`1},AuthorizationCenter.Dto.Requests.ModelRequest{`1})">
            <summary>
            更新
            </summary>
            <param name="response">响应</param>
            <param name="request">请求</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.IOrganizationManager`2.Delete(WS.Core.Dto.ResponseMessage{`1},AuthorizationCenter.Dto.Requests.ModelRequest{`1})">
            <summary>
            删除
            </summary>
            <param name="response">响应</param>
            <param name="request">请求</param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Managers.IPermissionManager`2">
            <summary>
            权限管理
            </summary>
            <typeparam name="IStore">存储</typeparam>
            <typeparam name="TJson">Dto数据分离，映射模型</typeparam>
        </member>
        <member name="M:AuthorizationCenter.Managers.IPermissionManager`2.Create(WS.Core.Dto.ResponseMessage{`1},AuthorizationCenter.Dto.Requests.ModelRequest{`1})">
            <summary>
            新建
            </summary>
            <param name="response">响应</param>
            <param name="request">请求</param>
        </member>
        <member name="M:AuthorizationCenter.Managers.IPermissionManager`2.Update(WS.Core.Dto.ResponseMessage{`1},AuthorizationCenter.Dto.Requests.ModelRequest{`1})">
            <summary>
            更新
            </summary>
            <param name="response">响应</param>
            <param name="request">请求</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.IPermissionManager`2.Delete(WS.Core.Dto.ResponseMessage{`1},AuthorizationCenter.Dto.Requests.ModelRequest{`1})">
            <summary>
            删除
            </summary>
            <param name="response">响应</param>
            <param name="request">请求</param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Managers.IRoleManager`2">
            <summary>
            角色管理
            </summary>
            <typeparam name="IStore">存储</typeparam>
            <typeparam name="TJson">Dto数据分离，映射模型</typeparam>
        </member>
        <member name="M:AuthorizationCenter.Managers.IRoleManager`2.Create(WS.Core.Dto.ResponseMessage{`1},AuthorizationCenter.Dto.Requests.ModelRequest{`1})">
            <summary>
            新建
            </summary>
            <param name="response">响应</param>
            <param name="request">请求</param>
        </member>
        <member name="M:AuthorizationCenter.Managers.IRoleManager`2.Update(WS.Core.Dto.ResponseMessage{`1},AuthorizationCenter.Dto.Requests.ModelRequest{`1})">
            <summary>
            更新
            </summary>
            <param name="response">响应</param>
            <param name="request">请求</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.IRoleManager`2.Delete(WS.Core.Dto.ResponseMessage{`1},AuthorizationCenter.Dto.Requests.ModelRequest{`1})">
            <summary>
            删除
            </summary>
            <param name="response">响应</param>
            <param name="request">请求</param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Managers.IUserManager`1">
            <summary>
            用户管理
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Managers.IUserManager`1.ById(WS.Core.Dto.ResponseMessage{`0},AuthorizationCenter.Dto.Requests.ModelRequest{`0})">
            <summary>
            通过ID查询
            </summary>
            <param name="response"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.IUserManager`1.Check(`0)">
            <summary>
            检查用户密码是否正确
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:AuthorizationCenter.Managers.IUserManager`1.List(WS.Core.Dto.PagingResponseMessage{`0},AuthorizationCenter.Dto.Requests.ModelRequest{`0})">
            <summary>
            批量查询
            </summary>
            <param name="response"></param>
            <param name="request"></param>
        </member>
        <member name="M:AuthorizationCenter.Managers.IUserManager`1.Create(WS.Core.Dto.ResponseMessage{`0},AuthorizationCenter.Dto.Requests.ModelRequest{`0})">
            <summary>
            新建
            </summary>
            <param name="response">响应</param>
            <param name="request">请求</param>
        </member>
        <member name="M:AuthorizationCenter.Managers.IUserManager`1.Update(WS.Core.Dto.ResponseMessage{`0},AuthorizationCenter.Dto.Requests.ModelRequest{`0})">
            <summary>
            更新
            </summary>
            <param name="response">响应</param>
            <param name="request">请求</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.IUserManager`1.Update(`0)">
            <summary>
            更新
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.IUserManager`1.Delete(WS.Core.Dto.ResponseMessage{`0},AuthorizationCenter.Dto.Requests.ModelRequest{`0})">
            <summary>
            删除
            </summary>
            <param name="response">响应</param>
            <param name="request">请求</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.IUserManager`1.Find(System.Func{`0,System.Boolean})">
            <summary>
            条件查询 -异步查询
            </summary>
            <param name="func">表达式</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.IUserManager`1.FindById(System.String)">
            <summary>
            通过ID查询 -异步查询 -只取第一个 -没有返回空
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.IUserManager`1.FindByName(System.String)">
            <summary>
            通过Name查询 -异步查询 -只取第一个 -没有返回空
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.IUserManager`1.ExistById(System.String)">
            <summary>
            通过ID判断存在 -异步
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.IUserManager`1.Exist(System.Func{`0,System.Boolean})">
            <summary>
            存在 -Lambda表达式
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.IUserManager`1.ExistByName(System.String)">
            <summary>
            存在Name -异步
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.IUserManager`1.Delete(AuthorizationCenter.Dto.Jsons.UserBaseJson)">
            <summary>
            删除 -异步
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.IUserManager`1.DeleteById(System.String)">
            <summary>
            通过ID删除 -异步
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Managers.UserManager">
            <summary>
            用户管理实现
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Managers.UserManager.Store">
            <summary>
            用户存储
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Managers.UserManager.Mapper">
            <summary>
            类型映射
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Managers.UserManager.#ctor(AuthorizationCenter.Stores.IUserBaseStore,AutoMapper.IMapper)">
            <summary>
            构造器
            </summary>
            <param name="store"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:AuthorizationCenter.Managers.UserManager.Create(WS.Core.Dto.ResponseMessage{AuthorizationCenter.Dto.Jsons.UserBaseJson},AuthorizationCenter.Dto.Requests.ModelRequest{AuthorizationCenter.Dto.Jsons.UserBaseJson})">
            <summary>
            创建
            </summary>
            <param name="response"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.UserManager.Delete(WS.Core.Dto.ResponseMessage{AuthorizationCenter.Dto.Jsons.UserBaseJson},AuthorizationCenter.Dto.Requests.ModelRequest{AuthorizationCenter.Dto.Jsons.UserBaseJson})">
            <summary>
            删除
            </summary>
            <param name="response"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.UserManager.List(WS.Core.Dto.PagingResponseMessage{AuthorizationCenter.Dto.Jsons.UserBaseJson},AuthorizationCenter.Dto.Requests.ModelRequest{AuthorizationCenter.Dto.Jsons.UserBaseJson})">
            <summary>
            批量 查询
            </summary>
            <param name="response"></param>
            <param name="request"></param>
        </member>
        <member name="M:AuthorizationCenter.Managers.UserManager.Update(WS.Core.Dto.ResponseMessage{AuthorizationCenter.Dto.Jsons.UserBaseJson},AuthorizationCenter.Dto.Requests.ModelRequest{AuthorizationCenter.Dto.Jsons.UserBaseJson})">
            <summary>
            更新
            </summary>
            <param name="response"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.UserManager.Check(AuthorizationCenter.Dto.Jsons.UserBaseJson)">
            <summary>
            检查用户密码否错误
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.UserManager.ById(WS.Core.Dto.ResponseMessage{AuthorizationCenter.Dto.Jsons.UserBaseJson},AuthorizationCenter.Dto.Requests.ModelRequest{AuthorizationCenter.Dto.Jsons.UserBaseJson})">
            <summary>
            通过ID查询
            </summary>
            <param name="response"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.UserManager.Find(System.Func{AuthorizationCenter.Dto.Jsons.UserBaseJson,System.Boolean})">
            <summary>
            条件查询 -异步
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.UserManager.FindById(System.String)">
            <summary>
            通过Id查询 -异步
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.UserManager.FindByName(System.String)">
            <summary>
            通过Name查询 -异步
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.UserManager.Update(AuthorizationCenter.Dto.Jsons.UserBaseJson)">
            <summary>
            更新 -异步
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.UserManager.ExistById(System.String)">
            <summary>
            存在通过ID -异步
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.UserManager.Exist(System.Func{AuthorizationCenter.Dto.Jsons.UserBaseJson,System.Boolean})">
            <summary>
            存在 -异步
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.UserManager.ExistByName(System.String)">
            <summary>
            存在Name
            </summary>
            <param name="name">Name</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.UserManager.Delete(AuthorizationCenter.Dto.Jsons.UserBaseJson)">
            <summary>
            删除
            </summary>
            <param name="json">Dto</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.UserManager.DeleteById(System.String)">
            <summary>
            通过ID删除 -异步
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Program">
            <summary>
            程序
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Program.Main(System.String[])">
            <summary>
            入口
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:AuthorizationCenter.Program.BuildWebHost(System.String[])">
            <summary>
            站点生成器
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Properties.Resources.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Startup">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            构造器
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:AuthorizationCenter.Startup.Configuration">
            <summary>
            配置
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            服务
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:AuthorizationCenter.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            配置
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
        <member name="T:AuthorizationCenter.Stores.INameStore`1">
            <summary>
            存储 -有ID有名实体 -基于IStore
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Stores.INameStore`1.FindById(System.String)">
            <summary>
            查询 -通过ID查询
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.INameStore`1.FindById``1(System.String,System.Func{`0,``0})">
            <summary>
            查询 -通过ID查询 -映射表达式
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="id">ID</param>
            <param name="map">映射表达式</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.INameStore`1.FindByName(System.String)">
            <summary>
            查询 -通过名称查询
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.INameStore`1.FindByName``1(System.String,System.Func{`0,``0})">
            <summary>
            查询 -通过名称查询
            </summary>
            <param name="name">名称</param>
            <param name="map">映射表达式</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.INameStore`1.DeleteById(System.String)">
            <summary>
            删除 -通过ID删除
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.INameStore`1.DeleteByName(System.String)">
            <summary>
            删除 -通过名称删除
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Stores.IOrganizationStore">
            <summary>
            组织存储
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Stores.IPermissionStore">
            <summary>
            权限存储
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Stores.IRoleStore">
            <summary>
            角色存储
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Stores.IStore`1">
            <summary>
            存储接口 -这里放的全是接口方法
            </summary>
            <typeparam name="TEntity">数据库实体</typeparam>
        </member>
        <member name="M:AuthorizationCenter.Stores.IStore`1.Find">
            <summary>
            批量查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.IStore`1.Find(System.Func{`0,System.Boolean})">
            <summary>
            条件查询 -条件表达式
            </summary>
            <param name="predicate">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.IStore`1.Find``1(System.Func{`0,System.Boolean},System.Func{`0,``0})">
            <summary>
            条件查询 -将符合条件的元素映射成自己需要的元素 -条件表达式 -映射表达式
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="predicate">条件表达式</param>
            <param name="map">映射表达式</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.IStore`1.Create(`0)">
            <summary>
            新建 创建用户
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.IStore`1.Update(`0)">
            <summary>
            更新 更新用户
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.IStore`1.Update``1(`0,System.Func{`0,``0})">
            <summary>
            更新 更新用户
            </summary>
            <param name="entity">实体</param>
            <param name="map">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.IStore`1.Update(System.Func{`0,System.Boolean},System.Action{`0})">
            <summary>
            更新实体 -条件表达式 -动作表达式 -返回处理后的集合
            </summary>
            <param name="predicate">条件表达式</param>
            <param name="action">动作表达式</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.IStore`1.Exist``1(System.Func{`0,``0})">
            <summary>
            存在 -通过TProperty存在的字段名称在UserBase表中查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.IStore`1.Exist(System.Func{`0,System.Boolean})">
            <summary>
            存在 -异步查询 -条件表达式（Any的参数类型）
            </summary>
            <param name="predicate">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.IStore`1.ExistAll(System.Func{`0,System.Boolean})">
            <summary>
            存在 -条件表达式 -集合所有元素满足条件表达式
            </summary>
            <param name="predicate">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.IStore`1.Delete(System.Func{`0,System.Boolean})">
            <summary>
            删除 -条件表达式 -异步
            </summary>
            <param name="predicate">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.IStore`1.Delete(`0)">
            <summary>
            删除 -异步
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Stores.IUserBaseStore">
            <summary>
            用户存储
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Stores.PermissionStore">
            <summary>
            权限存储
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Stores.StoreBase`1">
            <summary>
            存储抽象类 
            </summary>
            <typeparam name="TEntity">数据库实体</typeparam>
        </member>
        <member name="P:AuthorizationCenter.Stores.StoreBase`1.Context">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Stores.StoreBase`1.Logger">
            <summary>
            日志工具
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Stores.StoreBase`1.Create(`0)">
            <summary>
            新建实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.StoreBase`1.Find">
            <summary>
            批量查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.StoreBase`1.Update(`0)">
            <summary>
            更新实体 -异步
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.StoreBase`1.Update``1(`0,System.Func{`0,``0})">
            <summary>
            更新 更新用户
            </summary>
            <param name="entity">实体</param>
            <param name="map">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.StoreBase`1.Update(System.Func{`0,System.Boolean},System.Action{`0})">
            <summary>
            更新实体 -条件表达式 -动作表达式 -返回处理后的集合
            </summary>
            <param name="predicate">条件表达式</param>
            <param name="action">动作表达式</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.StoreBase`1.Find(System.Func{`0,System.Boolean})">
            <summary>
            查找 -条件表达式
            </summary>
            <param name="predicate">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.StoreBase`1.Find``1(System.Func{`0,System.Boolean},System.Func{`0,``0})">
            <summary>
            条件查询 -条件表达式 -映射表达式
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="predicate">条件表达式</param>
            <param name="map">映射表达式</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.StoreBase`1.Exist``1(System.Func{`0,``0})">
            <summary>
            存在 -异步 -实体映射表达式 -比较映射实体存在的字段 -性能损失
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="func">实体映射表达式</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.StoreBase`1.Compare``2(``0,``1)">
            <summary>
            比较 -TProperty存在的字段与TSource中的同名字段进行比较 
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="src"></param>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.StoreBase`1.Exist(System.Func{`0,System.Boolean})">
            <summary>
            存在 -条件表达式 -Any
            </summary>
            <param name="predicate">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.StoreBase`1.ExistAll(System.Func{`0,System.Boolean})">
            <summary>
            存在 -条件表达式 -集合所有元素满足条件表达式
            </summary>
            <param name="predicate">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.StoreBase`1.Delete(System.Func{`0,System.Boolean})">
            <summary>
            删除 -条件表达式 -异步
            </summary>
            <param name="predicate">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.StoreBase`1.Delete(`0)">
            <summary>
            删除 -异步
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Stores.UserBaseStore">
            <summary>
            用户核心表存储实现
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Stores.UserBaseStore.#ctor(AuthorizationCenter.Entitys.ApplicationDbContext)">
            <summary>
            构造器
            </summary>
            <param name="dbContext"></param>
        </member>
        <member name="M:AuthorizationCenter.Stores.UserBaseStore.FindById(System.String)">
            <summary>
            查询 通过ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.UserBaseStore.FindById``1(System.String,System.Func{AuthorizationCenter.Entitys.UserBase,``0})">
            <summary>
            查询 -ID -映射表达式
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="id"></param>
            <param name="map">映射表达式</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.UserBaseStore.FindByName(System.String)">
            <summary>
            查询 -通过名称
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.UserBaseStore.FindByName``1(System.String,System.Func{AuthorizationCenter.Entitys.UserBase,``0})">
            <summary>
            查询 -通过名称 -映射表达式
            </summary>
            <param name="name">Name</param>
            <param name="map">映射表达式</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.UserBaseStore.DeleteById(System.String)">
            <summary>
            删除 -通过用户ID
            </summary>
            <param name="id">用户ID</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.UserBaseStore.DeleteByName(System.String)">
            <summary>
            删除 -通过用户名
            </summary>
            <param name="name">用户名</param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.ViewModels.ErrorViewModel">
            <summary>
            错误视图模型
            </summary>
        </member>
        <member name="P:AuthorizationCenter.ViewModels.ErrorViewModel.RequestId">
            <summary>
            请求ID
            </summary>
        </member>
        <member name="P:AuthorizationCenter.ViewModels.ErrorViewModel.ShowRequestId">
            <summary>
            是否显示请求ID
            </summary>
        </member>
        <member name="T:AuthorizationCenter.ViewModels.Sign.SignInViewModel">
            <summary>
            登陆模型 
            </summary>
        </member>
        <member name="P:AuthorizationCenter.ViewModels.Sign.SignInViewModel.Id">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:AuthorizationCenter.ViewModels.Sign.SignInViewModel.SignName">
            <summary>
            用户签名
            </summary>
        </member>
        <member name="P:AuthorizationCenter.ViewModels.Sign.SignInViewModel.PassWord">
            <summary>
            用户密码
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions">
            <summary>
            服务扩展，关键在于 this 参数，必须保证静态类和静态方法
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.AddUserDefined(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加用户定义的依赖注入
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.UserDefinedBuilder">
            <summary>
            用户定义创建
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UserDefinedBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            构造器
            </summary>
            <param name="services"></param>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.UserDefinedBuilder.Services">
            <summary>
            服务
            </summary>
        </member>
    </members>
</doc>
