<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AuthorizationCenter</name>
    </assembly>
    <members>
        <member name="T:AuthorizationCenter.Controllers.CheckController">
            <summary>
            用于检查服务连通性
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Controllers.CheckController.Check">
            <summary>
            检查
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.HomeController.Index">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.HomeController.About">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.HomeController.Contact">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.HomeController.Privacy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.HomeController.Error">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Controllers.OrganizationJsonsController">
            <summary>
            
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Controllers.OrganizationJsonsController._context">
            <summary>
            
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Controllers.OrganizationJsonsController.Mapper">
            <summary>
            类型映射
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Controllers.OrganizationJsonsController.#ctor(AuthorizationCenter.Models.ApplicationDbContext,AutoMapper.IMapper)">
            <summary>
            构造器
            </summary>
            <param name="context"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:AuthorizationCenter.Controllers.OrganizationJsonsController.Index">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.OrganizationJsonsController.Edit(System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.OrganizationJsonsController.Edit(System.String,AuthorizationCenter.Dto.Jsons.OrganizationJson)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="organizationJson"></param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Controllers.RoleController">
            <summary>
            角色控制
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Controllers.SignController.Logger">
            <summary>
            日志器
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Controllers.SignController.UserManager">
            <summary>
            用户管理
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Controllers.SignController.Index">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.SignController.#ctor(AuthorizationCenter.Managers.IUserManager{AuthorizationCenter.Stores.IUserBaseStore,AuthorizationCenter.Dto.Jsons.UserBaseJson})">
            <summary>
            构造器
            </summary>
            <param name="userManager"></param>
        </member>
        <member name="M:AuthorizationCenter.Controllers.SignController.SignUp(AuthorizationCenter.Dto.Requests.ModelRequest{AuthorizationCenter.Dto.Jsons.UserBaseJson})">
            <summary>
            注册
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.SignController.SignIn(AuthorizationCenter.Dto.Jsons.UserBaseJson)">
            <summary>
            签入
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.SignController.SignOut(AuthorizationCenter.Dto.Requests.ModelRequest{AuthorizationCenter.Dto.Jsons.UserBaseJson})">
            <summary>
            签出
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.UserBasesController.Index">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Controllers.UserController">
            <summary>
            用户控制
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Controllers.UserController._context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Controllers.UserController.UserManager">
            <summary>
            用户管理
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Controllers.UserController.Mapper">
            <summary>
            类型映射
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Controllers.UserController.#ctor(AuthorizationCenter.Models.ApplicationDbContext,AuthorizationCenter.Managers.IUserManager{AuthorizationCenter.Stores.IUserBaseStore,AuthorizationCenter.Dto.Jsons.UserBaseJson},AutoMapper.IMapper)">
            <summary>
            构造器
            </summary>
            <param name="context"></param>
            <param name="userManager"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:AuthorizationCenter.Controllers.UserController.Index">
            <summary>
            列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.UserController.Create">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.UserController.Create(AuthorizationCenter.Dto.Jsons.UserBaseJson)">
            <summary>
            
            </summary>
            <param name="userBaseJson"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.UserController.Delete(System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Controllers.UserController.DeleteConfirmed(System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.DbIntializer">
            <summary>
            
            </summary>
        </member>
        <member name="M:AuthorizationCenter.DbIntializer.Initialize(AuthorizationCenter.Models.ApplicationDbContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:AuthorizationCenter.Define.Constants">
            <summary>
            常量
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.GUID_REG">
            <summary>
            GUID 正则表达式
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.GUID_ERR">
            <summary>
            GUID 格式错误消息
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.SIGNNAME_REG">
            <summary>
            签名 正则表达式
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.SIGNNAME_ERR">
            <summary>
            签名 格式错误消息
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.PASSWORD_REG">
            <summary>
            密码 正则表达式
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.PASSWORD_ERR">
            <summary>
            密码 格式错误消息
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.VISIBLE_REG">
            <summary>
            可见字符 正则表达式
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.VISIBLE_ERR">
            <summary>
            可见字符 格式错误，不能包含空格以及制表符等不可见字符"
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.CAPSCASE_REG">
            <summary>
            大写字母 正则表达式
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.LOWERCASE_REG">
            <summary>
            小写字母 正则表达式
            </summary>
        </member>
        <member name="F:AuthorizationCenter.Define.Constants.LETTER_REG">
            <summary>
            英文字母 正则表达式
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Dto.Jsons.OrganizationJson">
            <summary>
            组织Dto
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Dto.Jsons.OrganizationJson.Id">
            <summary>
            组织ID（GUID）
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Dto.Jsons.OrganizationJson.ParentId">
            <summary>
            父组织ID
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Dto.Jsons.OrganizationJson.Name">
            <summary>
            组织名称
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Dto.Jsons.OrganizationJson.Description">
            <summary>
            组织描述
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Dto.Jsons.PermissionJson">
            <summary>
            权限Dto
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Dto.Jsons.RoleJson">
            <summary>
            角色Dto
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Dto.Jsons.UserBaseJson">
            <summary>
            用户基础信息 -- UserBase
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Dto.Jsons.UserBaseJson.Id">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Dto.Jsons.UserBaseJson.SignName">
            <summary>
            用户签名
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Dto.Jsons.UserBaseJson.PassWord">
            <summary>
            用户密码
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Dto.Requests.ModelRequest`1">
            <summary>
            元数据操作请求
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:AuthorizationCenter.Dto.Requests.ModelRequest`1.Data">
            <summary>
            模型 为单实体操作
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Dto.Requests.ModelRequest`1.Type">
            <summary>
            操作 -- 增删查改
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Dto.Requests.ModelListRequest`1">
            <summary>
            元数据批量操作请求
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="T:AuthorizationCenter.Dto.Requests.UserBaseRequest">
            <summary>
            用户请求
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Dto.Requests.UserBaseRequest.User">
            <summary>
            用户基础信息
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Filters.CheckPermission">
            <summary>
            权限检查过滤器，Controller的Method都是原子操作
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Filters.CheckPermission.UserManager">
            <summary>
            用户管理
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Filters.CheckPermission.PermissionManager">
            <summary>
            权限管理
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Filters.CheckPermission.RoleManager">
            <summary>
            角色管理
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Filters.CheckPermission.OrganizationManager">
            <summary>
            组织管理
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Filters.CheckPermission.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            异步过滤
            </summary>
            <param name="context">行为执行上下文</param>
            <param name="next">下一个行为执行</param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Injections.MappingProfile">
            <summary>
            映射
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Injections.MappingProfile.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Managers.IOrganizationManager`2">
            <summary>
            组织管理
            </summary>
            <typeparam name="IStore">存储</typeparam>
            <typeparam name="TJson">Dto数据分离，映射模型</typeparam>
        </member>
        <member name="M:AuthorizationCenter.Managers.IOrganizationManager`2.Create(WS.Core.Dto.ResponseMessage{`1},AuthorizationCenter.Dto.Requests.ModelRequest{`1})">
            <summary>
            新建
            </summary>
            <param name="response">响应</param>
            <param name="request">请求</param>
        </member>
        <member name="M:AuthorizationCenter.Managers.IOrganizationManager`2.Update(WS.Core.Dto.ResponseMessage{`1},AuthorizationCenter.Dto.Requests.ModelRequest{`1})">
            <summary>
            更新
            </summary>
            <param name="response">响应</param>
            <param name="request">请求</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.IOrganizationManager`2.Delete(WS.Core.Dto.ResponseMessage{`1},AuthorizationCenter.Dto.Requests.ModelRequest{`1})">
            <summary>
            删除
            </summary>
            <param name="response">响应</param>
            <param name="request">请求</param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Managers.IPermissionManager`2">
            <summary>
            权限管理
            </summary>
            <typeparam name="IStore">存储</typeparam>
            <typeparam name="TJson">Dto数据分离，映射模型</typeparam>
        </member>
        <member name="M:AuthorizationCenter.Managers.IPermissionManager`2.Create(WS.Core.Dto.ResponseMessage{`1},AuthorizationCenter.Dto.Requests.ModelRequest{`1})">
            <summary>
            新建
            </summary>
            <param name="response">响应</param>
            <param name="request">请求</param>
        </member>
        <member name="M:AuthorizationCenter.Managers.IPermissionManager`2.Update(WS.Core.Dto.ResponseMessage{`1},AuthorizationCenter.Dto.Requests.ModelRequest{`1})">
            <summary>
            更新
            </summary>
            <param name="response">响应</param>
            <param name="request">请求</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.IPermissionManager`2.Delete(WS.Core.Dto.ResponseMessage{`1},AuthorizationCenter.Dto.Requests.ModelRequest{`1})">
            <summary>
            删除
            </summary>
            <param name="response">响应</param>
            <param name="request">请求</param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Managers.IRoleManager`2">
            <summary>
            角色管理
            </summary>
            <typeparam name="IStore">存储</typeparam>
            <typeparam name="TJson">Dto数据分离，映射模型</typeparam>
        </member>
        <member name="M:AuthorizationCenter.Managers.IRoleManager`2.Create(WS.Core.Dto.ResponseMessage{`1},AuthorizationCenter.Dto.Requests.ModelRequest{`1})">
            <summary>
            新建
            </summary>
            <param name="response">响应</param>
            <param name="request">请求</param>
        </member>
        <member name="M:AuthorizationCenter.Managers.IRoleManager`2.Update(WS.Core.Dto.ResponseMessage{`1},AuthorizationCenter.Dto.Requests.ModelRequest{`1})">
            <summary>
            更新
            </summary>
            <param name="response">响应</param>
            <param name="request">请求</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.IRoleManager`2.Delete(WS.Core.Dto.ResponseMessage{`1},AuthorizationCenter.Dto.Requests.ModelRequest{`1})">
            <summary>
            删除
            </summary>
            <param name="response">响应</param>
            <param name="request">请求</param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Managers.IUserManager`2">
            <summary>
            用户管理
            </summary>
            <typeparam name="IStore">存储</typeparam>
            <typeparam name="TJson">Dto数据隔离映射模型</typeparam>
        </member>
        <member name="P:AuthorizationCenter.Managers.IUserManager`2.Store">
            <summary>
            存储
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Managers.IUserManager`2.Check(`1)">
            <summary>
            检查用户密码是否正确
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:AuthorizationCenter.Managers.IUserManager`2.List(WS.Core.Dto.PagingResponseMessage{`1},AuthorizationCenter.Dto.Requests.ModelRequest{`1})">
            <summary>
            批量查询
            </summary>
            <param name="response"></param>
            <param name="request"></param>
        </member>
        <member name="M:AuthorizationCenter.Managers.IUserManager`2.Create(WS.Core.Dto.ResponseMessage{`1},AuthorizationCenter.Dto.Requests.ModelRequest{`1})">
            <summary>
            新建
            </summary>
            <param name="response">响应</param>
            <param name="request">请求</param>
        </member>
        <member name="M:AuthorizationCenter.Managers.IUserManager`2.Update(WS.Core.Dto.ResponseMessage{`1},AuthorizationCenter.Dto.Requests.ModelRequest{`1})">
            <summary>
            更新
            </summary>
            <param name="response">响应</param>
            <param name="request">请求</param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.IUserManager`2.Delete(WS.Core.Dto.ResponseMessage{`1},AuthorizationCenter.Dto.Requests.ModelRequest{`1})">
            <summary>
            删除
            </summary>
            <param name="response">响应</param>
            <param name="request">请求</param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Managers.UserManager">
            <summary>
            用户管理实现
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Managers.UserManager.Store">
            <summary>
            用户存储
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Managers.UserManager.Mapper">
            <summary>
            类型映射
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Managers.UserManager.#ctor(AuthorizationCenter.Stores.IUserBaseStore,AutoMapper.IMapper)">
            <summary>
            构造器
            </summary>
            <param name="store"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:AuthorizationCenter.Managers.UserManager.Create(WS.Core.Dto.ResponseMessage{AuthorizationCenter.Dto.Jsons.UserBaseJson},AuthorizationCenter.Dto.Requests.ModelRequest{AuthorizationCenter.Dto.Jsons.UserBaseJson})">
            <summary>
            创建
            </summary>
            <param name="response"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.UserManager.Delete(WS.Core.Dto.ResponseMessage{AuthorizationCenter.Dto.Jsons.UserBaseJson},AuthorizationCenter.Dto.Requests.ModelRequest{AuthorizationCenter.Dto.Jsons.UserBaseJson})">
            <summary>
            删除
            </summary>
            <param name="response"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.UserManager.List(WS.Core.Dto.PagingResponseMessage{AuthorizationCenter.Dto.Jsons.UserBaseJson},AuthorizationCenter.Dto.Requests.ModelRequest{AuthorizationCenter.Dto.Jsons.UserBaseJson})">
            <summary>
            批量
            </summary>
            <param name="response"></param>
            <param name="request"></param>
        </member>
        <member name="M:AuthorizationCenter.Managers.UserManager.Update(WS.Core.Dto.ResponseMessage{AuthorizationCenter.Dto.Jsons.UserBaseJson},AuthorizationCenter.Dto.Requests.ModelRequest{AuthorizationCenter.Dto.Jsons.UserBaseJson})">
            <summary>
            更新
            </summary>
            <param name="response"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Managers.UserManager.Check(AuthorizationCenter.Dto.Jsons.UserBaseJson)">
            <summary>
            检查用户密码否错误
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Models.ApplicationDbContext">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Models.ApplicationDbContext.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Models.ApplicationDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{AuthorizationCenter.Models.ApplicationDbContext})">
            <summary>
            应用数据库上下文
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:AuthorizationCenter.Models.ApplicationDbContext.UserBases">
            <summary>
            用户数据集
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Models.ApplicationDbContext.Roles">
            <summary>
            角色数据集
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Models.ApplicationDbContext.Permissions">
            <summary>
            权限数据集
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Models.ApplicationDbContext.Organizations">
            <summary>
            组织数据集
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Models.ApplicationDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            在模型创建时
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:AuthorizationCenter.Models.ApplicationDbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            数据库配置
            </summary>
            <param name="builder">数据库上下文选项创建器</param>
        </member>
        <member name="P:AuthorizationCenter.Models.ApplicationDbContext.OrganizationJson">
            <summary>
            数据库配置
            </summary>
            <param name="builder">数据库上下文选项创建器</param>
        </member>
        <member name="P:AuthorizationCenter.Models.ApplicationDbContext.UserBaseJson">
            <summary>
            数据库配置
            </summary>
            <param name="builder">数据库上下文选项创建器</param>
        </member>
        <member name="T:AuthorizationCenter.Models.Organization">
            <summary>
            组织模型
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Models.Organization.Id">
            <summary>
            组织ID（GUID）
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Models.Organization.ParentId">
            <summary>
            父组织ID
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Models.Organization.Name">
            <summary>
            组织名称
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Models.Organization.Description">
            <summary>
            组织描述
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Models.Permission">
            <summary>
            权限模型
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Models.Permission.Id">
            <summary>
            权限ID
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Models.Permission.Name">
            <summary>
            权限名称
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Models.Permission.Description">
            <summary>
            权限描述
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Models.Role">
            <summary>
            角色模型
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Models.Role.Id">
            <summary>
            角色GUID
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Models.Role.Name">
            <summary>
            角色名称
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Models.Role.Decription">
            <summary>
            角色描述
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Models.UserBase">
            <summary>
            用户模型
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Models.UserBase.Id">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Models.UserBase.SignName">
            <summary>
            用户签名
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Models.UserBase.PassWord">
            <summary>
            用户密码
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Program">
            <summary>
            程序
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Program.Main(System.String[])">
            <summary>
            入口
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:AuthorizationCenter.Program.BuildWebHost(System.String[])">
            <summary>
            站点生成器
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Startup">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            构造器
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:AuthorizationCenter.Startup.Configuration">
            <summary>
            配置
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            服务
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:AuthorizationCenter.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            配置
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
        <member name="T:AuthorizationCenter.Stores.INameStore`1">
            <summary>
            有Id和Name属性的单实体泛型接口
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:AuthorizationCenter.Stores.INameStore`1.Context">
            <summary>
            数据库上下文 转移
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Stores.INameStore`1.List">
            <summary>
            批量查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.INameStore`1.List(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{`0}})">
            <summary>
            条件查询
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.INameStore`1.ById(System.String)">
            <summary>
            查询 根据用户ID查询用户
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.INameStore`1.ByName(System.String)">
            <summary>
            查询 通过用户名查询用户
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.INameStore`1.Create(`0)">
            <summary>
            新建 创建用户
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.INameStore`1.Update(`0)">
            <summary>
            更新 更新用户
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.INameStore`1.DeleteIfId(System.String)">
            <summary>
            删除 删除用户
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Stores.IOrganizationStore">
            <summary>
            组织存储
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Stores.IPermissionStore">
            <summary>
            权限存储
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Stores.IRoleStore">
            <summary>
            角色存储
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Stores.IUserBaseStore">
            <summary>
            用户存储
            </summary>
        </member>
        <member name="T:AuthorizationCenter.Stores.NameStoreBase`1">
            <summary>
            包含Id和Name属性的抽象类
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:AuthorizationCenter.Stores.NameStoreBase`1.Context">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="P:AuthorizationCenter.Stores.NameStoreBase`1.Logger">
            <summary>
            日志工具
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Stores.NameStoreBase`1.ById(System.String)">
            <summary>
            Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.NameStoreBase`1.ByName(System.String)">
            <summary>
            Name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.NameStoreBase`1.Create(`0)">
            <summary>
            创建
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.NameStoreBase`1.DeleteIfId(System.String)">
            <summary>
            条件删除
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.NameStoreBase`1.List">
            <summary>
            批量查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.NameStoreBase`1.List(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{`0}})">
            <summary>
            条件查询
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.NameStoreBase`1.Update(`0)">
            <summary>
            更新
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Stores.PermissionStore">
            <summary>
            权限存储
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Stores.PermissionStore.ById(System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.PermissionStore.ByName(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.PermissionStore.DeleteIfId(System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.Stores.UserBaseStore">
            <summary>
            用户核心表存储实现
            </summary>
        </member>
        <member name="M:AuthorizationCenter.Stores.UserBaseStore.#ctor(AuthorizationCenter.Models.ApplicationDbContext)">
            <summary>
            构造器
            </summary>
            <param name="dbContext"></param>
        </member>
        <member name="M:AuthorizationCenter.Stores.UserBaseStore.ById(System.String)">
            <summary>
            查询 通过ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.UserBaseStore.ByName(System.String)">
            <summary>
            查询 通过名称
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AuthorizationCenter.Stores.UserBaseStore.DeleteIfId(System.String)">
            <summary>
            删除 用户核心信息
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:AuthorizationCenter.ViewModels.Sign.SignInViewModel">
            <summary>
            登陆
            </summary>
        </member>
        <member name="P:AuthorizationCenter.ViewModels.Sign.SignInViewModel.SignName">
            <summary>
            用户签名
            </summary>
        </member>
        <member name="P:AuthorizationCenter.ViewModels.Sign.SignInViewModel.PassWord">
            <summary>
            用户密码
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions">
            <summary>
            服务扩展，关键在于 this 参数，必须保证静态类和静态方法
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.AddUserDefined(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加用户定义的依赖注入
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.UserDefinedBuilder">
            <summary>
            用户定义创建
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UserDefinedBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            构造器
            </summary>
            <param name="services"></param>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.UserDefinedBuilder.Services">
            <summary>
            服务
            </summary>
        </member>
    </members>
</doc>
