@model IEnumerable<OrganizationJson>

@{
    ViewData["Title"] = "Index";
}

<h2>组织管理</h2>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                Parent Name
                @*@Html.DisplayNameFor(model => model.Parent.Name)*@
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Parent.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td>
                    <a asp-action="Create" asp-controller="User" asp-route-orgId="@item.Id">Add User</a> |
                    <a asp-action="Create" asp-controller="Organization" asp-route-id="@item.Id">Add Organization</a> |
                    <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>
@* 在这里创建一个组织显示树 *@
<link rel="stylesheet" href="/css/bootstrapStyle.css" type="text/css">

<h1>zTree - bootstrap 风格</h1>
<ul id="treeDemo" class="ztree">

</ul>
@section Scripts{
    <script type="text/javascript">
        // 创建一个zTree树
        function createTree2(url, treeId) {
            var zTree; //用于保存创建的树节点
            var setting = { //设置
                check: {
                    enable: true
                },
                view: {
                    showLine: true, //显示辅助线
                    dblClickExpand: true,
                },
                data: {
                    simpleData: {
                        enable: true,
                        idKey: "id",
                        pIdKey: "parentId",
                        rootPId: null
                    }
                }
            };
            $.ajax({ //请求数据,创建树
                type: 'GET',
                url: url,
                dataType: "json", //返回的结果为json  
                success: function (data) {
                    zTree = $.fn.zTree.init($(treeId), setting, data); //创建树
                },
                error: function (data) {
                    alert("创建树失败!" + data);
                }
            });
        }
        /**
         * 创建一棵树
         * @@param treeId HtmlDoc ID
         */

        function createTree(treeId) {
            var setting = { //设置
                check: {
                    enable: true
                },
                view: {
                    addHoverDom: addHoverDom,
                    removeHoverDom: removeHoverDom,
                    selectedMulti: false
                },
                data: {
                    simpleData: {
                        enable: true,
                        idKey: "id",
                        pIdKey: "parentId"
                    }
                },
                edit: {
                    enable: true
                },
                callback: {
                    // 点击编辑按钮
                    beforeEditName: function (treeId, treeNode) {
                        console.log({
                            event: "beforeEditName",
                            treeId,
                            orgid: treeNode.id
                        });
                        // 跳转到编辑按钮
                        location.href = "/Organization/Edit/" + treeNode.id;
                        return false;
                    },
                    // 修改节点的名称
                    beforeRename: function (treeId, treeNode, newName) {
                        // log.environment = "Development"
                        // log({event: "beforeRename", treeId, orgid: treeNode.id, newName});
                        console.log({
                            event: "beforeRename",
                            treeId,
                            orgid: treeNode.id,  // the id is source data from server
                            newName
                        });
                        // 向服务器请求修改名称-还是点击编辑按钮直接跳转到编辑界面
                        return true;
                    },
                    // 移除节点
                    beforeRemove: function (treeDocId, treeNode) {
                        location.href = "/Organization/Delete/" + treeNode.id;
                        return false;
                    }
                }
            };
            data = JSON.parse(`@Html.Raw(WS.Text.JsonUtil.ToJson(Model))`);
            console.log(data);
            $.fn.zTree.init($(treeId), setting, data);
        }
        
        $(document).ready(function () {
            createTree("#treeDemo");
        });
        
        function addHoverDom(treeId, treeNode) {
            var sObj = $("#" + treeNode.tId + "_span");
            if (treeNode.editNameFlag || $("#addBtn_" + treeNode.tId).length > 0) return;
            var addStr = "<span class='button add' id='addBtn_" + treeNode.tId
                + "'data-id='" + treeNode.id+"' title='add node' onfocus='this.blur();'></span>";
            sObj.after(addStr);
            var btn = $("#addBtn_" + treeNode.tId);
            if (btn) btn.bind("click", function () {
                location.href = "/Organization/Create/" + treeNode.id;
                return false;
            });
        };
        function removeHoverDom(treeId, treeNode) {
            $("#addBtn_" + treeNode.tId).unbind().remove();
        };

    </script>
}